[gcode_macro G29]
gcode:
 G28
 BED_MESH_CALIBRATE
 BED_MESH_PROFILE SAVE=default
 G1 X0 Y0 Z5 F4000

[gcode_macro MSG]
gcode:
  {% set TEXT = params.TEXT | default("") | string %}
  {action_respond_info(TEXT)}

[gcode_macro START_PRINT]
gcode:
#--------------Set Variables--------------#
  {% set BED = params.BED | default(50) | float %}                         ; bed temperature - BED
  {% set BED_TEMP = params.BED_TEMP | default(0) | float %}                ; bed temperature alias - BED_TEMP
  {% if BED_TEMP > 0 %}
    {% set BED = BED_TEMP %}
  {% endif %}
  {% set MIN_BED = params.MIN_BED | default(BED*0.9) | float %}            ; minimum bed temperature before heating extruder - MIN_BED
  {% set MIN_BED_TEMP = params.MIN_BED_TEMP | default(0) | float %}        ; minimum bed temperature alias - MIN_BED_TEMP
  {% if MIN_BED_TEMP > 0 %}
    {% set MIN_BED = MIN_BED_TEMP %}
  {% endif %}
#  {% set EXTRUDER = params.EXTRUDER | default("") | string %}              ; extruder select - EXTRUDER
#  {% set CURRENT_EXTRUDER = printer.save_variables.variables.current_extruder | default("extruder") | string %}
  {% set NOZZLE = params.NOZZLE | default(200) | float %}                  ; nozzle temperature - NOZZLE
  {% set NOZZLE_TEMP = params.NOZZLE_TEMP | default(0) | float %}          ; nozzle temperature alias - NOZZLE_TEMP
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(0) | float %}      ; nozzle temperature alias - EXTRUDER_TEMP
  {% if NOZZLE_TEMP > 0 %}
    {% set NOZZLE = NOZZLE_TEMP %}
  {% elif EXTRUDER_TEMP > 0 %}
    {% set NOZZLE = EXTRUDER_TEMP %}
  {% endif %}
  # {% set MATERIAL = params.MATERIAL | default("material") | string %}               ; material select - MATERIAL (not used for now)


#--------------Initialize--------------#
  SKEW_PROFILE LOAD=CaliFlower
  MSG TEXT="[START_PRINT] Initializing..."
  G21                                       ; set to mm
  M220 S100                                 ; set print speed to 100%
  M221 S100                                 ; set flow rate to 100%
  M107                                      ; disable fans
  G92 E0                                    ; set extruder to zero

#--------------Home and Clear Bed mesh--------------#
  BED_MESH_CLEAR
  MSG TEXT="[START_PRINT] Homing..."
  G28                         ; home
  G90                         ; absolute positioning

#--------------Heat Bed--------------#
  MSG TEXT="[START_PRINT] Heating bed..."
  G1 Z20 F1000                                              ; move nozzle away from bed
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}     ; set bed temperature
  {% if BED > 35 %}                                         ; set fan to maximum and preheat nozzle to 80% of its desired temperature
    M106 S255
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={NOZZLE*0.8}
  {% endif %}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={MIN_BED}      ; wait for bed to heat up

#--------------Bed Mesh--------------#
  MSG TEXT="[START_PRINT] Bed mesh measuring..."
  BED_MESH_CALIBRATE                 ; calibrating mesh
  BED_MESH_PROFILE LOAD=default      ; loading mesh

#--------------Final heat--------------#
  SMART_PARK
  MSG TEXT="[START_PRINT] Waiting for nozzle to heat up..."
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={NOZZLE}      ; set nozzle temperature
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={NOZZLE}           ; wait for nozzle to heat up
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}            ; wait for bed to heat up

#--------------Extruder change--------------#
#  {% if EXTRUDER != "" and CURRENT_EXTRUDER != EXTRUDER %}
#    EXTRUDER_CHANGE EXTRUDER={EXTRUDER}     ; set extruder
#  {% else %}
#    ACTIVATE_EXTRUDER EXTRUDER={CURRENT_EXTRUDER}
#  {% endif %}

#--------------Print--------------#
  MSG TEXT="[START_PRINT] Printing..."
  M117 Printing...
  LINE_PURGE
  M106 S50

[gcode_macro END_PRINT]
gcode:
#--------------Cooldown--------------#
  M140 S0      ; turn off bed
  M104 S0      ; turn off nozzle
  M106 S0      ; turn off fan
#--------------Move and retract--------------#
  G92 E0                                                                          ; set extruder position to zero
  {% if(printer.toolhead.position.z+10 > printer.toolhead.axis_maximum.z) %}      ; check if nozzle can go up by 10mm
    G1 Z{printer.toolhead.axis_maximum.z} E-10 F300                               ; if no then go to z axis maximum and retract 10mm
  {% else %}
    G1 Z{printer.toolhead.position.z+10} E-10 F300                                ; if yes then go up by 10mm and retract 10mm
  {% endif %}
#--------------Show print and Done--------------#
  G1 X-2 Y205 F5000      ; show print
  M84                    ; disable steppers
  BED_MESH_CLEAR
  SET_SKEW CLEAR=1
  MSG TEXT="[END_PRINT] Print is done!"

[gcode_macro PUSH_PRINT_OFF]
gcode:
#--------------Set Variables--------------#
  {% set PUSH_BED = params.PUSH_BED | default(60) | float %}                    ; push bed temperature - PUSH_BED
  {% set PUSH_BED_TEMP = params.PUSH_BED_TEMP | default(0) | float %}           ; push bed temperature alias - PUSH_BED_TEMP
  {% if(PUSH_BED_TEMP > 0) %}
    {% set PUSH_BED = PUSH_BED_TEMP %}
  {% endif %}
  {% set WAIT_NOZZLE = params.NOZZLE | default(210) | float %}                  ; wait nozzle temperature - WAIT_NOZZLE
  {% set WAIT_NOZZLE_TEMP = params.NOZZLE_TEMP | default(0) | float %}          ; wait nozzle temperature alias - WAIT_NOZZLE_TEMP
  {% set WAIT_EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(0) | float %}      ; wait nozzle temperature alias - WAIT_EXTRUDER_TEMP
  {% if(WAIT_NOZZLE_TEMP > 0) %}
    {% set WAIT_NOZZLE = WAIT_NOZZLE_TEMP %}
  {% elif(WAIT_EXTRUDER_TEMP > 0) %}
    {% set WAIT_NOZZLE = WAIT_EXTRUDER_TEMP %}
  {% endif %}
#--------------Cooldown--------------#
  M140 S{PUSH_BED}      ; cooldown bed
  M104 S{WAIT_NOZZLE}      ; cooldown nozzle
  M106 S0      ; turn off fan
#--------------Move up and retract--------------#
  G92 E0                                                                          ; set extruder position to zero
  {% if(printer.toolhead.position.z+10 > printer.toolhead.axis_maximum.z) %}      ; check if nozzle can go up by 10mm
    G1 Z{printer.toolhead.axis_maximum.z} E-10 F300                               ; if no then go to z axis maximum and retract 10mm
  {% else %}
    G1 Z{printer.toolhead.position.z+10} E-10 F300                                ; if yes then go up by 10mm and retract 10mm
  {% endif %}
#--------------Show print and Done--------------#
  G1 X-2 Y205 F5000      ; show print
  M84                    ; disable steppers
  BED_MESH_CLEAR
  MSG TEXT="[PUSH_PRINT_OFF] Print shall be off!"

[gcode_macro FILAMENT_LOAD]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1 E120 F350          # Move the extruder forward 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.

[gcode_macro FILAMENT_UNLOAD]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1 E-420 F350          # Move the extruder forward 120mm at a speed of 350mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.


[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
